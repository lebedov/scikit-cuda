{
    "A": "array of dimensions (lda, n)",
    "B": "array of dimensions (ldb, n)",
    "C": "array of dimensions (ldc, n)",
    "X": "array of dimensions (ldx, n)",
    "Y": "array of dimensions (ldy, n)",
    "alpha": "scalar used for multiplication",
    "base": "enumerated indexBase type",
    "baseIdx": "enumerated indexBase type",
    "batchCount": "number of systems to solve",
    "batchStride": "stride (number of elements) that separates the vectors of every system (must be at least m)",
    "beta": "scalar used for multiplication",
    "blockDim": "block dimension of sparse matrix A, larger than zero.",
    "blockSize": "block dimension of sparse matrix A, larger than zero.",
    "boost_val": "boost value to replace a numerical zero",
    "bscColPtr": "integer array of nb+1 elements that contains the start of every block column and the end of the last block column plus one",
    "bscRowInd": "integer array of nnzb row indices of the non-zero blocks of matrix A",
    "bscVal": "array of nnzb*rowBlockDim*colBlockDim non-zero elements of matrix A. It is only filled-in if copyValues is set to CUSPARSE_ACTION_NUMERIC",
    "bscSortedVal": "array of nnzb*rowBlockDim*colBlockDim non-zero elements of matrix A. It is only filled-in if copyValues is set to CUSPARSE_ACTION_NUMERIC",
    "bsrColInd": "integer array of nnz ( = csrRowPtrA(mb) - csrRowPtrA(0) ) column indices of the nonzero blocks of matrix A",
    "bsrColIndA": "integer array of nnz ( = csrRowPtrA(mb) - csrRowPtrA(0) ) column indices of the nonzero blocks of matrix A",
    "bsrColIndC": "integer array of nnz ( = csrRowPtrC(mb) - csrRowPtrC(0) ) column indices of the nonzero blocks of matrix C",
    "bsrEndPtr": "integer array of mb elements that contains the end of the every block row plus one",
    "bsrEndPtrA": "integer array of mb elements that contains the end of the every block row plus one",
    "bsrMaskPtr": "integer array of sizeOfMask elements that contains the indices corresponding to updated block rows",
    "bsrMaskPtrA": "integer array of sizeOfMask elements that contains the indices corresponding to updated block rows",
    "bsrRowPtr": "integer array of mb + 1 elements that contains the start of every block row and the end of the last block row plus one",
    "bsrRowPtrA": "integer array of mb + 1 elements that contains the start of every block row and the end of the last block row plus one",
    "bsrRowPtrC": "integer array of mb + 1 elements that contains the start of every block row and the end of the last block row plus one",
    "bsrVal": "array of nnz ( = csrRowPtrA(mb) - csrRowPtrA(0) ) nonzero blocks of matrix A",
    "bsrValA": "array of nnz ( = csrRowPtrA(mb) - csrRowPtrA(0) ) nonzero blocks of matrix A",
    "bsrValC": "array of nnz ( = csrRowPtrC(mb) - csrRowPtrC(0) ) nonzero blocks of matrix C",
    "bsrSortedColInd": "integer array of nnz ( = csrSortedRowPtrA(mb) - csrSortedRowPtrA(0) ) column indices of the nonzero blocks of matrix A",
    "bsrSortedColIndA": "integer array of nnz ( = csrSortedRowPtrA(mb) - csrSortedRowPtrA(0) ) column indices of the nonzero blocks of matrix A",
    "bsrSortedColIndC": "integer array of nnz ( = csrSortedRowPtrC(mb) - csrSortedRowPtrC(0) ) column indices of the nonzero blocks of matrix C",
    "bsrSortedEndPtr": "integer array of mb elements that contains the end of the every block row plus one",
    "bsrSortedEndPtrA": "integer array of mb elements that contains the end of the every block row plus one",
    "bsrSortedMaskPtr": "integer array of sizeOfMask elements that contains the indices corresponding to updated block rows",
    "bsrSortedMaskPtrA": "integer array of sizeOfMask elements that contains the indices corresponding to updated block rows",
    "bsrSortedRowPtr": "integer array of mb + 1 elements that contains the start of every block row and the end of the last block row plus one",
    "bsrSortedRowPtrA": "integer array of mb + 1 elements that contains the start of every block row and the end of the last block row plus one",
    "bsrSortedRowPtrC": "integer array of mb + 1 elements that contains the start of every block row and the end of the last block row plus one",
    "bsrSortedVal": "array of nnz ( = csrSortedRowPtrA(mb) - csrSortedRowPtrA(0) ) nonzero blocks of matrix A",
    "bsrSortedValA": "array of nnz ( = csrSortedRowPtrA(mb) - csrSortedRowPtrA(0) ) nonzero blocks of matrix A",
    "bsrSortedValC": "array of nnz ( = csrSortedRowPtrC(mb) - csrSortedRowPtrC(0) ) nonzero blocks of matrix C",
    "c": "cosine element of the rotation matrix",
    "colBlockDim": "number of columns within a block of A",
    "colBlockDimA": "number of columns within a block of A",
    "colBlockDimC": "number of columns within a block of C",
    "cooRowInd": "integer array of nnz uncompressed row indices.",
    "copyValues": "enumerated CUSPARSE_ACTION",
    "cscColPtr": "integer array of n+1 elements that contains the start of every row and the end of the last column plus one",
    "cscColPtrA": "integer array of n+1 elements that contains the start of every row and the end of the last column plus one",
    "cscRowInd": "integer array of nnz ( = cscColPtrA(m) - cscColPtrA(0) ) row indices of the nonzero elements of matrix A",
    "cscRowIndA": "integer array of nnz ( = cscColPtrA(m) - cscColPtrA(0) ) row indices of the nonzero elements of matrix A",
    "cscVal": "array of nnz ( = cscColPtrA(m) - cscColPtrA(0) ) nonzero elements of matrix A",
    "cscValA": "array of nnz ( = cscColPtrA(m) - cscColPtrA(0) ) nonzero elements of matrix A",
    "csrColInd": "integer array of nnz ( = csrRowPtrA(m) - csrRowPtrA(0) ) column indices of the nonzero elements of matrix A",
    "csrColIndA": "integer array of nnz ( = csrRowPtrA(m) - csrRowPtrA(0) ) column indices of the nonzero elements of matrix A",
    "csrColIndB": "integer array of nnz ( = csrRowPtrB(m) - csrRowPtrB(0) ) column indices of the nonzero elements of matrix B",
    "csrColIndC": "integer array of nnz ( = csrRowPtrC(m) - csrRowPtrC(0) ) column indices of the nonzero elements of matrix C",
    "csrRowPtr": "integer array of m+1 elements that contains the start of every row and the end of the last row plus one",
    "csrRowPtrA": "integer array of m+1 elements that contains the start of every row and the end of the last row plus one",
    "csrRowPtrB": "integer array of m+1 elements that contains the start of every row and the end of the last row plus one",
    "csrRowPtrC": "integer array of m+1 elements that contains the start of every row and the end of the last row plus one",
    "csrVal": " array of nnz ( = csrRowPtrA(m) - csrRowPtrA(0) ) nonzero elements of matrix A",
    "csrValA": " array of nnz ( = csrRowPtrA(m) - csrRowPtrA(0) ) nonzero elements of matrix A",
    "csrValA_ValM": "array of nnz ( = csrRowPtrA(m) - csrRowPtrA(0) ) nonzero elements of matrix A",
    "csrValA_valM": "array of nnz ( = csrRowPtrA(m) - csrRowPtrA(0) ) nonzero elements of matrix A",
    "csrValB": " array of nnz ( = csrRowPtrB(m) - csrRowPtrB(0) ) nonzero elements of matrix B",
    "csrValC": " array of nnz ( = csrRowPtrC(m) - csrRowPtrC(0) ) nonzero elements of matrix C",
    "csrValM": "array of nnz ( = csrRowPtrA(m) - csrRowPtrA(0) ) nonzero elements of matrix A",
    "cscSortedColPtr": "integer array of n+1 elements that contains the start of every row and the end of the last column plus one",
    "cscSortedColPtrA": "integer array of n+1 elements that contains the start of every row and the end of the last column plus one",
    "cscSortedRowInd": "integer array of nnz ( = cscSortedColPtrA(m) - cscSortedColPtrA(0) ) row indices of the nonzero elements of matrix A",
    "cscSortedRowIndA": "integer array of nnz ( = cscSortedColPtrA(m) - cscSortedColPtrA(0) ) row indices of the nonzero elements of matrix A",
    "cscSortedVal": "array of nnz ( = cscSortedColPtrA(m) - cscSortedColPtrA(0) ) nonzero elements of matrix A",
    "cscSortedValA": "array of nnz ( = cscSortedColPtrA(m) - cscSortedColPtrA(0) ) nonzero elements of matrix A",
    "csrSortedColInd": "integer array of nnz ( = csrSortedRowPtrA(m) - csrSortedRowPtrA(0) ) column indices of the nonzero elements of matrix A",
    "csrSortedColIndA": "integer array of nnz ( = csrSortedRowPtrA(m) - csrSortedRowPtrA(0) ) column indices of the nonzero elements of matrix A",
    "csrSortedColIndB": "integer array of nnz ( = csrSortedRowPtrB(m) - csrSortedRowPtrB(0) ) column indices of the nonzero elements of matrix B",
    "csrSortedColIndC": "integer array of nnz ( = csrSortedRowPtrC(m) - csrSortedRowPtrC(0) ) column indices of the nonzero elements of matrix C",
    "csrSortedColIndD": "integer array of nnz ( = csrSortedRowPtrC(m) - csrSortedRowPtrC(0) ) column indices of the nonzero elements of matrix C",
    "csrSortedRowPtr": "integer array of m+1 elements that contains the start of every row and the end of the last row plus one",
    "csrSortedRowPtrA": "integer array of m+1 elements that contains the start of every row and the end of the last row plus one",
    "csrSortedRowPtrB": "integer array of m+1 elements that contains the start of every row and the end of the last row plus one",
    "csrSortedRowPtrC": "integer array of m+1 elements that contains the start of every row and the end of the last row plus one",
    "csrSortedRowPtrD": "integer array of m+1 elements that contains the start of every row and the end of the last row plus one",
    "csrSortedVal": " array of nnz ( = csrSortedRowPtrA(m) - csrSortedRowPtrA(0) ) nonzero elements of matrix A",
    "csrSortedValA": " array of nnz ( = csrSortedRowPtrA(m) - csrSortedRowPtrA(0) ) nonzero elements of matrix A",
    "csrSortedValD": " array of nnz ( = csrSortedRowPtrD(m) - csrSortedRowPtrD(0) ) nonzero elements of matrix A",
    "csrSortedValA_ValM": "array of nnz ( = csrSortedRowPtrA(m) - csrSortedRowPtrA(0) ) nonzero elements of matrix A",
    "csrSortedValA_valM": "array of nnz ( = csrSortedRowPtrA(m) - csrSortedRowPtrA(0) ) nonzero elements of matrix A",
    "csrSortedValB": " array of nnz ( = csrSortedRowPtrB(m) - csrSortedRowPtrB(0) ) nonzero elements of matrix B",
    "csrSortedValC": " array of nnz ( = csrSortedRowPtrC(m) - csrSortedRowPtrC(0) ) nonzero elements of matrix C",
    "csrSortedValM": "array of nnz ( = csrSortedRowPtrA(m) - csrSortedRowPtrA(0) ) nonzero elements of matrix A",
    "d": "dense array containing the main diagonal of the tri-diagonal linear system",
    "descr": "matrix descriptor",
    "descrA": "matrix descriptor of sparse matrix A",
    "descrB": "matrix descriptor of sparse matrix B",
    "descrC": "matrix descriptor of sparse matrix C",
    "descrD": "matrix descriptor of sparse matrix D",
    "descra": "matrix descriptor of sparse matrix A",
    "descrb": "matrix descriptor of sparse matrix B",
    "diagType": "enumerated diagType",
    "dir": "enumerated storage format direction",
    "dirA": "enumerated storage format direction",
    "dl": "dense array containing the lower diagonal of the tri-diagonal linear system. The first element of each lower diagonal must be zero",
    "du": "dense array containing the upper diagonal of the tri-diagonal linear system. The last element of each upper diagonal must be zero",
    "enable_boost": "disable boost by enable_boost=0; otherwise, boost is enabled",
    "fillMode": "enumerated fill mode",
    "handle": "cuSPARSE context handle",
    "hybA": "cuSPARSE HYB data structure",
    "idxBase": "enumerated indexBase type",
    "info": "solve and analysis structure",
    "k": "number of columns of A",
    "kb": "number of block columns of sparse matrix A",
    "lda": "leading dimension of A",
    "ldb": "leading dimension of B",
    "ldc": "leading dimension of C",
    "ldx": "leading dimension of X",
    "ldy": "leading dimension of Y",
    "levelInd": "integer array of m (number of rows in the matrix) elements that contains the row indices belonging to every level",
    "levelPtr": "integer array of nlevels+1 elements that contains the start of every level and the end of the last level plus one",
    "m": "number of rows of A",
    "mb": "number of block rows of matrix A",
    "mode": "enumerated pointer mode",
    "n": "number of columns of ",
    "nb": "number of block columns of matrix A",
    "nlevels": "number of levels",
    "nnz": "number of non-zero elements",
    "nnzA": "number of non-zero elements of matrix A",
    "nnzB": "number of non-zero elements of matrix B",
    "nnzD": "number of non-zero elements of matrix D",
    "nnzPerCol": "array of size n containing the number of nonzero elements per column",
    "nnzPerRow": "array of size n containing the number of nonzero elements per row",
    "nnzPerRowCol": "array of size m or n containing the number of nonzero elements per row or column, respectively",
    "nnzPerRowColumn": "array of size m or n containing the number of nonzero elements per row or column, respectively",
    "nnzTotalDevHostPtr": "total number of nonzero elements in device or host memory",
    "nnzTotalHostPtr": "total number of nonzero elements in host memory",
    "nnzHostPtr": "total number of nonzero elements in memory",
    "nnzb": "number of non-zero blocks of matrix A",
    "pBuffer": "buffer allocated by the user",
    "pBufferSize": "number of bytes of the buffer used",
    "pBufferSizeInBytes": "number of bytes of the buffer used",
    "pInputBuffer": "library version number",
    "partitionType": "partitioning method to be used in the conversion",
    "policy": "enumerated cuSPARSE solve policy",
    "position": "if no structural or numerical zero, position is -1; otherwise if A(j,j) is missing or U(j,j) is zero, position=j",
    "resultHostPtr": "pointer to result in the host memory",
    "resultDevHostPtr": "pointer to result in the device or host memory",
    "rowBlockDim": "number of rows within a block of A",
    "rowBlockDimA": "number of rows within a block of A",
    "rowBlockDimC": "number of rows within a block of C",
    "s": "sine element of the rotation matrix",
    "sizeOfMask": "number of updated block rows of y ",
    "streamId": "stream to be used by the library",
    "tol": "tolerance to determine a numerical zero",
    "trans": "enumerated operation type, op(A)",
    "transA": "enumerated operation type, op(A)",
    "transB": "enumerated operation type, op(B)",
    "transX": "enumerated operation type, op(X)",
    "transXY": "enumerated operation type, op(X) and op(Y)",
    "transa": "enumerated operation type, op(A)",
    "transb": "enumerated operation type, op(B)",
    "type": "enumerated matrix type",
    "userEllWidth": "width of the regular (ELL) part of the matrix in HYB format, which should be less than the maximum number of nonzeros per row and is only required if partitionType == CUSPARSE_HYB_PARTITION_USER",
    "version": "library version number",
    "x": "vector",
    "f": "vector",
    "xInd": "integer vector of nnz indices corresponding to the nonzero values",
    "xVal": "vector containing nnz data values",
    "y": "vector",
    "F": "array of dimensions (ldf, n)",
    "ldf": "leading dimension of F",
    "fractionToColor": "fraction of nodes to be colored, which should be in the interval [0.0,1.0], for example 0.8 implies that 80 percent of nodes will be colored.",
    "ncolors": "The number of distinct colors used (at most the size of the matrix, but likely much smaller).",
    "coloring": "The resulting coloring permutation",
    "reordering": "The resulting reordering permutation (untouched if NULL)",
    "p": "integer array of nnz unsorted map indices. To construct csrVal, the user has to set P=0:1:(nnz-1).",
    "P": "integer array of nnz unsorted map indices. To construct cooVal, the user has to set P=0:1:(nnz-1).",
    "cooRowsA": "integer array of nnz unsorted row indices of A. ",
    "cooColsA": "integer array of nnz unsorted column indices of A. "
}